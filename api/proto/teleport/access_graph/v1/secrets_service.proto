// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.access_graph.v1;

import "teleport/access_graph/v1/secrets.proto";
import "teleport/devicetrust/v1/device_collected_data.proto";
import "teleport/devicetrust/v1/devicetrust_service.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/accessgraph/v1;accessgraphv1";

// SecretsScannerService provides CRUD methods for Access Graph Secret Scanner
// functionality.
service SecretsScannerService {
  // ReportAuthorizedKeys is used by Teleport SSH nodes to report authorized keys
  // found on each user
  rpc ReportAuthorizedKeys(stream ReportAuthorizedKeysRequest) returns (stream ReportAuthorizedKeysResponse) {}
  // ReportSecrets is used by trusted devices to report secrets found on the host
  // that could be used to bypass Teleport.
  rpc ReportSecrets(stream ReportSecretsRequest) returns (stream ReportSecretsResponse) {}
}

// ReportAuthorizedKeys is used by Teleport nodes to report authorized keys
// that could be used to bypass Teleport.
message ReportAuthorizedKeysRequest {
  // keys is a list of authorized keys that could be used to bypass Teleport.
  repeated teleport.access_graph.v1.AuthorizedKey keys = 1;
}

// ReportAuthorizedKeysResponse is the response from ReportAuthorizedKeys
// RPC method.
message ReportAuthorizedKeysResponse {}

// Request for ReportSecrets.
//
// Authentication ceremony flow:
// -> AuthenticateDeviceInit (client)
// <- AuthenticateDeviceChallenge (server)
// -> AuthenticateDeviceChallengeResponse
// <- DeviceAuthentication (server)
// -> ReportPrivateKeys (client) [1 or more]
// -> CloseStream (client)
message ReportSecretsRequest {
  oneof payload {
    AuthenticateDeviceInit init = 1;
    teleport.devicetrust.v1.AuthenticateDeviceChallengeResponse challenge_response = 2;
    teleport.devicetrust.v1.TPMAuthenticateDeviceChallengeResponse tpm_challenge_response = 3;
    ReportPrivateKeys private_keys = 4;
  }
}

// ReportPrivateKeys is used by trusted devices to report private keys found on the host
// that could be used to bypass Teleport.
message ReportPrivateKeys {
  // keys is a list of private keys that could be used to bypass Teleport.
  repeated teleport.access_graph.v1.PrivateKey keys = 1;
}

// Response for ReportSecrets.
message ReportSecretsResponse {
  oneof payload {
    // A challenge is returned to the device as a result of a successful
    // device authentication initiation.
    teleport.devicetrust.v1.AuthenticateDeviceChallenge challenge = 1;

    // A TPM challenge is returned to the device as a result of a successful
    // device authentication initiation.
    teleport.devicetrust.v1.TPMAuthenticateDeviceChallenge tpm_challenge = 2;

    // A confirmation that the device has been authenticated successfully and
    // the device can now proceed sending the found secrets.
    DeviceAuthenticated device_authenticated = 3;
  }
}

// AuthenticateDeviceInit initiates the device authentication ceremony.
message AuthenticateDeviceInit {
  // ID of the enrolled device credential.
  string credential_id = 1;

  // Device collected data.
  // Matched against the device registration information and any previously
  // collected data.
  teleport.devicetrust.v1.DeviceCollectedData device_data = 2;
}

// DeviceAuthenticated is a confirmation that the device has been authenticated
message DeviceAuthenticated {}
