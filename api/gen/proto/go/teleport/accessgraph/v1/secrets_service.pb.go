// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: teleport/access_graph/v1/secrets_service.proto

package accessgraphv1

import (
	v1 "github.com/gravitational/teleport/api/gen/proto/go/teleport/devicetrust/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ReportAuthorizedKeys is used by Teleport nodes to report authorized keys
// that could be used to bypass Teleport.
type ReportAuthorizedKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// keys is a list of authorized keys that could be used to bypass Teleport.
	Keys []*AuthorizedKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *ReportAuthorizedKeysRequest) Reset() {
	*x = ReportAuthorizedKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_access_graph_v1_secrets_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportAuthorizedKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportAuthorizedKeysRequest) ProtoMessage() {}

func (x *ReportAuthorizedKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_access_graph_v1_secrets_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportAuthorizedKeysRequest.ProtoReflect.Descriptor instead.
func (*ReportAuthorizedKeysRequest) Descriptor() ([]byte, []int) {
	return file_teleport_access_graph_v1_secrets_service_proto_rawDescGZIP(), []int{0}
}

func (x *ReportAuthorizedKeysRequest) GetKeys() []*AuthorizedKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

// ReportAuthorizedKeysResponse is the response from ReportAuthorizedKeys
// RPC method.
type ReportAuthorizedKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportAuthorizedKeysResponse) Reset() {
	*x = ReportAuthorizedKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_access_graph_v1_secrets_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportAuthorizedKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportAuthorizedKeysResponse) ProtoMessage() {}

func (x *ReportAuthorizedKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_access_graph_v1_secrets_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportAuthorizedKeysResponse.ProtoReflect.Descriptor instead.
func (*ReportAuthorizedKeysResponse) Descriptor() ([]byte, []int) {
	return file_teleport_access_graph_v1_secrets_service_proto_rawDescGZIP(), []int{1}
}

// Request for ReportSecrets.
//
// Authentication ceremony flow:
// -> AuthenticateDeviceInit (client)
// <- AuthenticateDeviceChallenge (server)
// -> AuthenticateDeviceChallengeResponse
// <- DeviceAuthentication (server)
// -> ReportPrivateKeys (client) [1 or more]
// -> CloseStream (client)
type ReportSecretsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*ReportSecretsRequest_Init
	//	*ReportSecretsRequest_ChallengeResponse
	//	*ReportSecretsRequest_TpmChallengeResponse
	//	*ReportSecretsRequest_PrivateKeys
	Payload isReportSecretsRequest_Payload `protobuf_oneof:"payload"`
}

func (x *ReportSecretsRequest) Reset() {
	*x = ReportSecretsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_access_graph_v1_secrets_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportSecretsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportSecretsRequest) ProtoMessage() {}

func (x *ReportSecretsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_access_graph_v1_secrets_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportSecretsRequest.ProtoReflect.Descriptor instead.
func (*ReportSecretsRequest) Descriptor() ([]byte, []int) {
	return file_teleport_access_graph_v1_secrets_service_proto_rawDescGZIP(), []int{2}
}

func (m *ReportSecretsRequest) GetPayload() isReportSecretsRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *ReportSecretsRequest) GetInit() *AuthenticateDeviceInit {
	if x, ok := x.GetPayload().(*ReportSecretsRequest_Init); ok {
		return x.Init
	}
	return nil
}

func (x *ReportSecretsRequest) GetChallengeResponse() *v1.AuthenticateDeviceChallengeResponse {
	if x, ok := x.GetPayload().(*ReportSecretsRequest_ChallengeResponse); ok {
		return x.ChallengeResponse
	}
	return nil
}

func (x *ReportSecretsRequest) GetTpmChallengeResponse() *v1.TPMAuthenticateDeviceChallengeResponse {
	if x, ok := x.GetPayload().(*ReportSecretsRequest_TpmChallengeResponse); ok {
		return x.TpmChallengeResponse
	}
	return nil
}

func (x *ReportSecretsRequest) GetPrivateKeys() *ReportPrivateKeys {
	if x, ok := x.GetPayload().(*ReportSecretsRequest_PrivateKeys); ok {
		return x.PrivateKeys
	}
	return nil
}

type isReportSecretsRequest_Payload interface {
	isReportSecretsRequest_Payload()
}

type ReportSecretsRequest_Init struct {
	Init *AuthenticateDeviceInit `protobuf:"bytes,1,opt,name=init,proto3,oneof"`
}

type ReportSecretsRequest_ChallengeResponse struct {
	ChallengeResponse *v1.AuthenticateDeviceChallengeResponse `protobuf:"bytes,2,opt,name=challenge_response,json=challengeResponse,proto3,oneof"`
}

type ReportSecretsRequest_TpmChallengeResponse struct {
	TpmChallengeResponse *v1.TPMAuthenticateDeviceChallengeResponse `protobuf:"bytes,3,opt,name=tpm_challenge_response,json=tpmChallengeResponse,proto3,oneof"`
}

type ReportSecretsRequest_PrivateKeys struct {
	PrivateKeys *ReportPrivateKeys `protobuf:"bytes,4,opt,name=private_keys,json=privateKeys,proto3,oneof"`
}

func (*ReportSecretsRequest_Init) isReportSecretsRequest_Payload() {}

func (*ReportSecretsRequest_ChallengeResponse) isReportSecretsRequest_Payload() {}

func (*ReportSecretsRequest_TpmChallengeResponse) isReportSecretsRequest_Payload() {}

func (*ReportSecretsRequest_PrivateKeys) isReportSecretsRequest_Payload() {}

// ReportPrivateKeys is used by trusted devices to report private keys found on the host
// that could be used to bypass Teleport.
type ReportPrivateKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// keys is a list of private keys that could be used to bypass Teleport.
	Keys []*PrivateKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *ReportPrivateKeys) Reset() {
	*x = ReportPrivateKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_access_graph_v1_secrets_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportPrivateKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportPrivateKeys) ProtoMessage() {}

func (x *ReportPrivateKeys) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_access_graph_v1_secrets_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportPrivateKeys.ProtoReflect.Descriptor instead.
func (*ReportPrivateKeys) Descriptor() ([]byte, []int) {
	return file_teleport_access_graph_v1_secrets_service_proto_rawDescGZIP(), []int{3}
}

func (x *ReportPrivateKeys) GetKeys() []*PrivateKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

// Response for ReportSecrets.
type ReportSecretsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*ReportSecretsResponse_Challenge
	//	*ReportSecretsResponse_TpmChallenge
	//	*ReportSecretsResponse_DeviceAuthenticated
	Payload isReportSecretsResponse_Payload `protobuf_oneof:"payload"`
}

func (x *ReportSecretsResponse) Reset() {
	*x = ReportSecretsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_access_graph_v1_secrets_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportSecretsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportSecretsResponse) ProtoMessage() {}

func (x *ReportSecretsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_access_graph_v1_secrets_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportSecretsResponse.ProtoReflect.Descriptor instead.
func (*ReportSecretsResponse) Descriptor() ([]byte, []int) {
	return file_teleport_access_graph_v1_secrets_service_proto_rawDescGZIP(), []int{4}
}

func (m *ReportSecretsResponse) GetPayload() isReportSecretsResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *ReportSecretsResponse) GetChallenge() *v1.AuthenticateDeviceChallenge {
	if x, ok := x.GetPayload().(*ReportSecretsResponse_Challenge); ok {
		return x.Challenge
	}
	return nil
}

func (x *ReportSecretsResponse) GetTpmChallenge() *v1.TPMAuthenticateDeviceChallenge {
	if x, ok := x.GetPayload().(*ReportSecretsResponse_TpmChallenge); ok {
		return x.TpmChallenge
	}
	return nil
}

func (x *ReportSecretsResponse) GetDeviceAuthenticated() *DeviceAuthenticated {
	if x, ok := x.GetPayload().(*ReportSecretsResponse_DeviceAuthenticated); ok {
		return x.DeviceAuthenticated
	}
	return nil
}

type isReportSecretsResponse_Payload interface {
	isReportSecretsResponse_Payload()
}

type ReportSecretsResponse_Challenge struct {
	// A challenge is returned to the device as a result of a successful
	// device authentication initiation.
	Challenge *v1.AuthenticateDeviceChallenge `protobuf:"bytes,1,opt,name=challenge,proto3,oneof"`
}

type ReportSecretsResponse_TpmChallenge struct {
	// A TPM challenge is returned to the device as a result of a successful
	// device authentication initiation.
	TpmChallenge *v1.TPMAuthenticateDeviceChallenge `protobuf:"bytes,2,opt,name=tpm_challenge,json=tpmChallenge,proto3,oneof"`
}

type ReportSecretsResponse_DeviceAuthenticated struct {
	// A confirmation that the device has been authenticated successfully and
	// the device can now proceed sending the found secrets.
	DeviceAuthenticated *DeviceAuthenticated `protobuf:"bytes,3,opt,name=device_authenticated,json=deviceAuthenticated,proto3,oneof"`
}

func (*ReportSecretsResponse_Challenge) isReportSecretsResponse_Payload() {}

func (*ReportSecretsResponse_TpmChallenge) isReportSecretsResponse_Payload() {}

func (*ReportSecretsResponse_DeviceAuthenticated) isReportSecretsResponse_Payload() {}

// AuthenticateDeviceInit initiates the device authentication ceremony.
type AuthenticateDeviceInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the enrolled device credential.
	CredentialId string `protobuf:"bytes,1,opt,name=credential_id,json=credentialId,proto3" json:"credential_id,omitempty"`
	// Device collected data.
	// Matched against the device registration information and any previously
	// collected data.
	DeviceData *v1.DeviceCollectedData `protobuf:"bytes,2,opt,name=device_data,json=deviceData,proto3" json:"device_data,omitempty"`
}

func (x *AuthenticateDeviceInit) Reset() {
	*x = AuthenticateDeviceInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_access_graph_v1_secrets_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticateDeviceInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateDeviceInit) ProtoMessage() {}

func (x *AuthenticateDeviceInit) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_access_graph_v1_secrets_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateDeviceInit.ProtoReflect.Descriptor instead.
func (*AuthenticateDeviceInit) Descriptor() ([]byte, []int) {
	return file_teleport_access_graph_v1_secrets_service_proto_rawDescGZIP(), []int{5}
}

func (x *AuthenticateDeviceInit) GetCredentialId() string {
	if x != nil {
		return x.CredentialId
	}
	return ""
}

func (x *AuthenticateDeviceInit) GetDeviceData() *v1.DeviceCollectedData {
	if x != nil {
		return x.DeviceData
	}
	return nil
}

// DeviceAuthenticated is a confirmation that the device has been authenticated
type DeviceAuthenticated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceAuthenticated) Reset() {
	*x = DeviceAuthenticated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teleport_access_graph_v1_secrets_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceAuthenticated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceAuthenticated) ProtoMessage() {}

func (x *DeviceAuthenticated) ProtoReflect() protoreflect.Message {
	mi := &file_teleport_access_graph_v1_secrets_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceAuthenticated.ProtoReflect.Descriptor instead.
func (*DeviceAuthenticated) Descriptor() ([]byte, []int) {
	return file_teleport_access_graph_v1_secrets_service_proto_rawDescGZIP(), []int{6}
}

var File_teleport_access_graph_v1_secrets_service_proto protoreflect.FileDescriptor

var file_teleport_access_graph_v1_secrets_service_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x18, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x1a, 0x26, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x33, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5a, 0x0a, 0x1b, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x4b, 0x65,
	0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x4b, 0x65, 0x79,
	0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x1e, 0x0a, 0x1c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa3, 0x03, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x46, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x48,
	0x00, 0x52, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x6d, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x16, 0x74, 0x70, 0x6d, 0x5f, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x50, 0x4d, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x74, 0x70, 0x6d, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x50, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x73, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x4d, 0x0a, 0x11,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x73, 0x12, 0x38, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0xbc, 0x02, 0x0a, 0x15,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x5e, 0x0a, 0x0d, 0x74,
	0x70, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x50, 0x4d,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x74,
	0x70, 0x6d, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x62, 0x0a, 0x14, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x13, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x16, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0b, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x15, 0x0a, 0x13, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x32, 0x9d, 0x02, 0x0a, 0x15, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x53, 0x63, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x14, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x4b,
	0x65, 0x79, 0x73, 0x12, 0x35, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x4b,
	0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x76, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x2e, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01,
	0x42, 0x5a, 0x5a, 0x58, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67,
	0x72, 0x61, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x76, 0x31, 0x3b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x67, 0x72, 0x61, 0x70, 0x68, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_teleport_access_graph_v1_secrets_service_proto_rawDescOnce sync.Once
	file_teleport_access_graph_v1_secrets_service_proto_rawDescData = file_teleport_access_graph_v1_secrets_service_proto_rawDesc
)

func file_teleport_access_graph_v1_secrets_service_proto_rawDescGZIP() []byte {
	file_teleport_access_graph_v1_secrets_service_proto_rawDescOnce.Do(func() {
		file_teleport_access_graph_v1_secrets_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_teleport_access_graph_v1_secrets_service_proto_rawDescData)
	})
	return file_teleport_access_graph_v1_secrets_service_proto_rawDescData
}

var file_teleport_access_graph_v1_secrets_service_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_teleport_access_graph_v1_secrets_service_proto_goTypes = []interface{}{
	(*ReportAuthorizedKeysRequest)(nil),               // 0: teleport.access_graph.v1.ReportAuthorizedKeysRequest
	(*ReportAuthorizedKeysResponse)(nil),              // 1: teleport.access_graph.v1.ReportAuthorizedKeysResponse
	(*ReportSecretsRequest)(nil),                      // 2: teleport.access_graph.v1.ReportSecretsRequest
	(*ReportPrivateKeys)(nil),                         // 3: teleport.access_graph.v1.ReportPrivateKeys
	(*ReportSecretsResponse)(nil),                     // 4: teleport.access_graph.v1.ReportSecretsResponse
	(*AuthenticateDeviceInit)(nil),                    // 5: teleport.access_graph.v1.AuthenticateDeviceInit
	(*DeviceAuthenticated)(nil),                       // 6: teleport.access_graph.v1.DeviceAuthenticated
	(*AuthorizedKey)(nil),                             // 7: teleport.access_graph.v1.AuthorizedKey
	(*v1.AuthenticateDeviceChallengeResponse)(nil),    // 8: teleport.devicetrust.v1.AuthenticateDeviceChallengeResponse
	(*v1.TPMAuthenticateDeviceChallengeResponse)(nil), // 9: teleport.devicetrust.v1.TPMAuthenticateDeviceChallengeResponse
	(*PrivateKey)(nil),                                // 10: teleport.access_graph.v1.PrivateKey
	(*v1.AuthenticateDeviceChallenge)(nil),            // 11: teleport.devicetrust.v1.AuthenticateDeviceChallenge
	(*v1.TPMAuthenticateDeviceChallenge)(nil),         // 12: teleport.devicetrust.v1.TPMAuthenticateDeviceChallenge
	(*v1.DeviceCollectedData)(nil),                    // 13: teleport.devicetrust.v1.DeviceCollectedData
}
var file_teleport_access_graph_v1_secrets_service_proto_depIdxs = []int32{
	7,  // 0: teleport.access_graph.v1.ReportAuthorizedKeysRequest.keys:type_name -> teleport.access_graph.v1.AuthorizedKey
	5,  // 1: teleport.access_graph.v1.ReportSecretsRequest.init:type_name -> teleport.access_graph.v1.AuthenticateDeviceInit
	8,  // 2: teleport.access_graph.v1.ReportSecretsRequest.challenge_response:type_name -> teleport.devicetrust.v1.AuthenticateDeviceChallengeResponse
	9,  // 3: teleport.access_graph.v1.ReportSecretsRequest.tpm_challenge_response:type_name -> teleport.devicetrust.v1.TPMAuthenticateDeviceChallengeResponse
	3,  // 4: teleport.access_graph.v1.ReportSecretsRequest.private_keys:type_name -> teleport.access_graph.v1.ReportPrivateKeys
	10, // 5: teleport.access_graph.v1.ReportPrivateKeys.keys:type_name -> teleport.access_graph.v1.PrivateKey
	11, // 6: teleport.access_graph.v1.ReportSecretsResponse.challenge:type_name -> teleport.devicetrust.v1.AuthenticateDeviceChallenge
	12, // 7: teleport.access_graph.v1.ReportSecretsResponse.tpm_challenge:type_name -> teleport.devicetrust.v1.TPMAuthenticateDeviceChallenge
	6,  // 8: teleport.access_graph.v1.ReportSecretsResponse.device_authenticated:type_name -> teleport.access_graph.v1.DeviceAuthenticated
	13, // 9: teleport.access_graph.v1.AuthenticateDeviceInit.device_data:type_name -> teleport.devicetrust.v1.DeviceCollectedData
	0,  // 10: teleport.access_graph.v1.SecretsScannerService.ReportAuthorizedKeys:input_type -> teleport.access_graph.v1.ReportAuthorizedKeysRequest
	2,  // 11: teleport.access_graph.v1.SecretsScannerService.ReportSecrets:input_type -> teleport.access_graph.v1.ReportSecretsRequest
	1,  // 12: teleport.access_graph.v1.SecretsScannerService.ReportAuthorizedKeys:output_type -> teleport.access_graph.v1.ReportAuthorizedKeysResponse
	4,  // 13: teleport.access_graph.v1.SecretsScannerService.ReportSecrets:output_type -> teleport.access_graph.v1.ReportSecretsResponse
	12, // [12:14] is the sub-list for method output_type
	10, // [10:12] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_teleport_access_graph_v1_secrets_service_proto_init() }
func file_teleport_access_graph_v1_secrets_service_proto_init() {
	if File_teleport_access_graph_v1_secrets_service_proto != nil {
		return
	}
	file_teleport_access_graph_v1_secrets_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_teleport_access_graph_v1_secrets_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportAuthorizedKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_access_graph_v1_secrets_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportAuthorizedKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_access_graph_v1_secrets_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportSecretsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_access_graph_v1_secrets_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportPrivateKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_access_graph_v1_secrets_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportSecretsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_access_graph_v1_secrets_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticateDeviceInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teleport_access_graph_v1_secrets_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceAuthenticated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_teleport_access_graph_v1_secrets_service_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ReportSecretsRequest_Init)(nil),
		(*ReportSecretsRequest_ChallengeResponse)(nil),
		(*ReportSecretsRequest_TpmChallengeResponse)(nil),
		(*ReportSecretsRequest_PrivateKeys)(nil),
	}
	file_teleport_access_graph_v1_secrets_service_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ReportSecretsResponse_Challenge)(nil),
		(*ReportSecretsResponse_TpmChallenge)(nil),
		(*ReportSecretsResponse_DeviceAuthenticated)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_teleport_access_graph_v1_secrets_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_teleport_access_graph_v1_secrets_service_proto_goTypes,
		DependencyIndexes: file_teleport_access_graph_v1_secrets_service_proto_depIdxs,
		MessageInfos:      file_teleport_access_graph_v1_secrets_service_proto_msgTypes,
	}.Build()
	File_teleport_access_graph_v1_secrets_service_proto = out.File
	file_teleport_access_graph_v1_secrets_service_proto_rawDesc = nil
	file_teleport_access_graph_v1_secrets_service_proto_goTypes = nil
	file_teleport_access_graph_v1_secrets_service_proto_depIdxs = nil
}
